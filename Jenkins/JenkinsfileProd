pipeline {
    agent {
        label 'fire'
    }

    environment {
        WEBHOOK_URL_DISCORD = credentials('WEBHOOK_URL_DISCORD')
        DOCKER_USERNAME = credentials('DOCKER_USERNAME')
        DOCKER_PASSWORD = credentials('DOCKER_PASSWORD')
    }

    stages {
        stage('Unit Test'){
            agent {
                docker {
                    image 'golang:1.21.4-alpine3.18'
                    label 'fire'
                }
            }

            steps {
                sh 'GOCACHE=/tmp/ go test -v ./...'
            }   
        }

        stage('Build') {
            steps {
                echo "Building Apps"
                sh "docker build -t $DOCKER_USERNAME/fundhub-dashboard:${BUILD_NUMBER} ."
            }
        }

        stage('Waiting Approval') {
            steps {
                script {
                    def approval // Define the approval variable

                    withCredentials([string(credentialsId: 'WEBHOOK_URL_DISCORD', variable: 'WEBHOOK_URL_DISCORD')]) {
                        script {
                            discordSend webhookURL: "$WEBHOOK_URL_DISCORD",
                                        title: "${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}",
                                        description: "Please continue fundhub-dashboard:${BUILD_NUMBER} push to Registry",
                                        showChangeset: true,
                                        link: env.BUILD_URL
                        }

                        timeout(time: 30, unit: "MINUTES") {
                            approval = input message: 'Do you want to approve the push to Registry?', ok: 'Yes'
                        }
                    }

                    if (approval != 'Yes') {
                        discordSend webhookURL: "$WEBHOOK_URL_DISCORD",
                                    title: "${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}",
                                    description: "Push to Registry approval received from Rejected :x:",
                                    showChangeset: true,
                                    link: env.BUILD_URL
                    }
                }
            }
        }

        stage('Push to Registry') {
            steps {
                discordSend webhookURL: "$WEBHOOK_URL_DISCORD",
                            title: "${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}",
                            description: "Push to Registry approval received from Approved :white_check_mark:",
                            showChangeset: true,
                            link: env.BUILD_URL

                echo "Pushing to DockerHub"
                sh "docker login -u $DOCKER_USERNAME -p ${DOCKER_PASSWORD}"
                sh "docker push $DOCKER_USERNAME/fundhub-dashboard:${BUILD_NUMBER}"
                sh 'docker rmi $(docker images -q)'
            }
        }
    }
    
    post {
        aborted {
            echo "Post Aborted"
            discordSend description: "Push Docker Image", footer: "Push image fundhub-dashboard:${BUILD_NUMBER} to Registry. Status: Aborted", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "$WEBHOOK_URL_DISCORD"
        }

        success {
            echo "Post Success"
            discordSend description: "Push Docker Image", footer: "Push image fundhub-dashboard:${BUILD_NUMBER} to Registry. Status: Success", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "$WEBHOOK_URL_DISCORD"
        }

        failure {
            echo "Post Failure"
            discordSend description: "Push Docker Image", footer: "Push image fundhub-dashboard:${BUILD_NUMBER} to Registry. Status: Failure", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "$WEBHOOK_URL_DISCORD"
        }
    }
}
